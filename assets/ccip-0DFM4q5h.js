import{B as p,aa as m,ab as y,ac as w,$ as k,ad as O,ae as E,af as L,ag as h,ah as x}from"./index.esm-DQpf5hpN.js";import"./index-DyOQYfny.js";import"./index.esm-BmGDGD-v.js";import"./startWith-CUA0N737.js";import"./index.esm-COc-PyqV.js";class M extends p{constructor({callbackSelector:s,cause:e,data:o,extraData:c,sender:u,urls:a}){var i;super(e.shortMessage||"An error occurred while fetching for an offchain result.",{cause:e,metaMessages:[...e.metaMessages||[],(i=e.metaMessages)!=null&&i.length?"":[],"Offchain Gateway Call:",a&&["  Gateway URL(s):",...a.map(f=>`    ${m(f)}`)],`  Sender: ${u}`,`  Data: ${o}`,`  Callback selector: ${s}`,`  Extra data: ${c}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class R extends p{constructor({result:s,url:e}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${m(e)}`,`Response: ${y(s)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class $ extends p{constructor({sender:s,to:e}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${e}`,`OffchainLookup sender address: ${s}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}const T="0x556f1830",S={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function C(n,{blockNumber:s,blockTag:e,data:o,to:c}){const{args:u}=w({data:o,abi:[S]}),[a,i,f,t,r]=u,{ccipRead:d}=n,b=d&&typeof(d==null?void 0:d.request)=="function"?d.request:q;try{if(!k(c,a))throw new $({sender:a,to:c});const l=await b({data:f,sender:a,urls:i}),{data:g}=await O(n,{blockNumber:s,blockTag:e,data:E([t,L([{type:"bytes"},{type:"bytes"}],[l,r])]),to:c});return g}catch(l){throw new M({callbackSelector:t,cause:l,data:o,extraData:r,sender:a,urls:i})}}async function q({data:n,sender:s,urls:e}){var c;let o=new Error("An unknown error occurred.");for(let u=0;u<e.length;u++){const a=e[u],i=a.includes("{data}")?"GET":"POST",f=i==="POST"?{data:n,sender:s}:void 0;try{const t=await fetch(a.replace("{sender}",s).replace("{data}",n),{body:JSON.stringify(f),method:i});let r;if((c=t.headers.get("Content-Type"))!=null&&c.startsWith("application/json")?r=(await t.json()).data:r=await t.text(),!t.ok){o=new h({body:f,details:r!=null&&r.error?y(r.error):t.statusText,headers:t.headers,status:t.status,url:a});continue}if(!x(r)){o=new R({result:r,url:a});continue}return r}catch(t){o=new h({body:f,details:t.message,url:a})}}throw o}export{q as ccipRequest,C as offchainLookup,S as offchainLookupAbiItem,T as offchainLookupSignature};
//# sourceMappingURL=ccip-0DFM4q5h.js.map
