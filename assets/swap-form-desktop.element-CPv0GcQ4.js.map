{"version":3,"mappings":"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","names":["__vitePreload","SwapFormDesktopElement","LitElement","OverlayController","SceneController","subscribe","getThemeChange","map","brandColor","distinctUntilChanged","tap","color","BrandColors","classes","html","classMap","event","when","swapSnapshot","id","swapFormStyle","__decorateClass","consume","SwapContextToken","ApplicationContextToken","state","customElement"],"ignoreList":[],"sources":["../../../../apps/dapp/src/app/elements/swap-form/swap-form-desktop.element.ts"],"sourcesContent":["import { html, LitElement } from 'lit';\nimport { customElement, state } from 'lit/decorators.js';\nimport { consume } from '@lit/context';\nimport { SwapContextToken } from '@one-inch-community/sdk/swap';\nimport { BrandColors, IApplicationContext, ISwapContext, SwapSnapshot, TokenType } from '@one-inch-community/models';\nimport { ApplicationContextToken } from '@one-inch-community/core/application-context';\nimport { SceneController } from '@one-inch-community/ui-components/scene';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { when } from 'lit/directives/when.js';\nimport { OverlayController } from '@one-inch-community/ui-components/overlay';\nimport { swapFormStyle } from './swap-form.style';\n\nimport '@one-inch-community/ui-components/card';\nimport '@one-inch-community/ui-components/button';\nimport '@one-inch-community/widgets/swap-form';\nimport { subscribe } from '@one-inch-community/core/lit';\nimport { getThemeChange } from '@one-inch-community/core/theme';\nimport { distinctUntilChanged, map, tap } from 'rxjs';\n\nimport('@one-inch-community/widgets/wallet-manage');\nimport('@one-inch-community/widgets/select-token');\nimport('@one-inch-community/ui-components/icon');\nimport('../settings');\n\n@customElement(SwapFormDesktopElement.tagName)\nexport class SwapFormDesktopElement extends LitElement {\n  static readonly tagName = 'inch-swap-form-desktop' as const;\n\n  static styles = [\n    swapFormStyle,\n    SceneController.styles()\n  ];\n\n  @consume({ context: SwapContextToken })\n  swapContext!: ISwapContext\n\n  @consume({ context: ApplicationContextToken })\n  applicationContext!: IApplicationContext\n\n  @state() private isRainbowTheme = false;\n\n  private targetSelectToken: TokenType | null = null;\n\n  private swapSnapshot: SwapSnapshot | null = null;\n\n  private readonly overlay = new OverlayController('app-root', 'center');\n\n  private readonly desktopScene = new SceneController('swapForm', {\n    swapForm: { minWidth: 556, maxWidth: 556, maxHeight: 625, lazyRender: true },\n    selectToken: { minWidth: 556, maxWidth: 556, maxHeight: 680 },\n    confirmSwap: { minWidth: 556, maxWidth: 556, maxHeight: 680 },\n    settings: { minWidth: 556, maxWidth: 556, maxHeight: 900, lazyRender: true },\n  });\n\n  protected firstUpdated() {\n    subscribe(this, [\n      getThemeChange().pipe(\n        map(({ brandColor }) => brandColor),\n        distinctUntilChanged(),\n        tap(color => this.isRainbowTheme = color === BrandColors.rainbow)\n      ),\n    ], { requestUpdate: false });\n  }\n\n  protected render() {\n    const classes = {\n      'shadow-container': true,\n      'shadow-container-rainbow': this.isRainbowTheme\n    };\n    return html`\n      <div class=\"${classMap(classes)}\">\n        <inch-card>\n          ${this.desktopScene.render({\n            swapForm: () => html`\n              <inch-swap-form\n                @confirmSwap=\"${(event: CustomEvent) => this.onOpenConfirmSwap(event)}\"\n                @changeChain=\"${() => this.onOpenChangeChainView()}\"\n                @openTokenSelector=\"${(event: CustomEvent) => this.onOpenSelectToken(event)}\"\n                @connectWallet=\"${() => this.onOpenConnectWalletView()}\"\n              >\n                <div slot=\"header\">\n                  <inch-button @click=\"${() => this.desktopScene.nextTo('settings')}\" type=\"tertiary-gray\" size=\"l\">\n                    <inch-icon icon=\"settings24\"></inch-icon>\n                  </inch-button>\n                </div>\n              </inch-swap-form>\n            `,\n            selectToken: () => html`\n              <inch-select-token\n                tokenType=\"${this.targetSelectToken!}\"\n                @backCard=\"${() => this.desktopScene.back()}\"\n              ></inch-select-token>\n            `,\n            confirmSwap: () => when(this.swapSnapshot, (swapSnapshot) => html`\n              <inch-confirm-swap\n                .swapSnapshot=\"${swapSnapshot as any}\"\n                @backCard=\"${async () => {\n                  await this.desktopScene.back();\n                  this.swapSnapshot = null;\n                }}\"\n              ></inch-confirm-swap>\n            `),\n            settings: () => html`\n              <inch-settings\n                @closeSettings=\"${() => this.desktopScene.back()}\"\n              ></inch-settings>\n            `\n          })}\n        </inch-card>\n      </div>\n    `\n  }\n\n  private async onOpenSelectToken(event: CustomEvent) {\n    this.targetSelectToken = event.detail.value;\n    await this.desktopScene.nextTo('selectToken');\n  }\n\n  private async onOpenConfirmSwap(event: CustomEvent) {\n    this.swapSnapshot = event.detail.value;\n    await this.desktopScene.nextTo('confirmSwap');\n  }\n\n  private async onOpenChangeChainView() {\n    const id = await this.overlay.open(html`\n      <inch-chain-selector-list\n        showShadow\n        @closeCard=\"${() => this.overlay.close(id)}\"\n        .controller=\"${this.applicationContext.connectWalletController}\"\n      ></inch-chain-selector-list>\n    `);\n  }\n\n  private async onOpenConnectWalletView() {\n    const id = await this.overlay.open(html`\n      <inch-wallet-manage\n        showShadow\n        @closeCard=\"${() => this.overlay.close(id)}\"\n        .controller=\"${this.applicationContext.connectWalletController}\"\n      ></inch-wallet-manage>\n    `);\n  }\n\n}\n"],"file":"assets/swap-form-desktop.element-CPv0GcQ4.js"}